package messages;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.sql.SQLException;

import core.Database;
import core.Room;

public class DataRequest extends Message {
	private static final long serialVersionUID = -660126755875805552L;

	public DataRequest(){
		this.setFrameType(frameTypes.DATA_REQUEST);
	}
	
	@Override
	public void sendSerial(OutputStream outputStream) {
		byte[] out = new byte[16];
    	out[0] = (byte) '#'; 						//	starting delimeter
    	out[1] = (byte) '1'; 						//	address of source
    	out[2] = (byte) 'a';						//	frameType
		out[4] = (byte) '\n';						//	ending delimter
		
		try {
			/**
			 * @param data   Array holding data to be written
		     * @param off    Offset of data in array
		     * @param n      Amount of data to write, starting from off.
		     * @return       Amount of data actually written
		     **/
			outputStream.write(out, 0, out.length);
		} catch (IOException e) {
			e.printStackTrace();
		}	
	}

	@Override
	public void execute(Database db, ObjectOutputStream objectOutputStream,
			OutputStream serialOutputStream) throws SQLException {
		
	
			Room room = db.db_getData(this.getRoom());
			Data data = new Data();
			data.setRoom(room);
			data.sendObject(objectOutputStream); //send object to building subsystem
		
		
	}
	
	
	/**
	if( obj instanceof Data ){
		//Data msg = (Data) obj;
		//TODO update database
	} else if (obj  instanceof DataRequest){
		
	}else if (obj instanceof RFID){
		
	} else if (obj instanceof Command){
		
	} else if (obj instanceof Alarm){
		Alarm msg = (Alarm) obj;
		try {
			db.db_setAlarmFlag(msg.getRoom());
			//TODO send message to PIC to disable alarm; add to frameType; could be inside command frame!
		} catch (SQLException e) {
			System.out.println("SQL Exception in MessageHandler");
			e.printStackTrace();
		}
	} **/
}