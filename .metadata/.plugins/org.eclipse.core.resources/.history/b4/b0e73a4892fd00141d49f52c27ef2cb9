package messages;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.sql.SQLException;

import core.Database;
import core.Room;
import messages.RFID.statusCodes;

public class Command extends Message {
	private int actionID;
	private int newStatus;
	
	public Command(){
		this.setFrameType(frameTypes.COMMAND);
	}

	@Override
	public void sendSerial(OutputStream outputStream) {
		System.out.println("Sending Command");
		byte[] out = new byte[16];
    	out[0] = (byte) '#'; 		//	starting delimeter
    	out[1] = (byte) '1'; 		//	address of source
    	out[2] = (byte) 'e';		//	frameType
    	out[3] = (byte) actionID;	// 	message : 1B ElementID
    	out[4] = (byte) newStatus;	// 	message : 1B New Status
		out[4] = (byte) '\n';		//	ending delimter
		
		try {
			/**
			 * @param data   Array holding data to be written
		     * @param off    Offset of data in array
		     * @param n      Amount of data to write, starting from off.
		     * @return       Amount of data actually written
		     **/
			outputStream.write(out, 0, out.length);
		} catch (IOException e) {
			e.printStackTrace();
		}	
	}
	
	@Override
	public void sendObject(ObjectOutputStream objectOutputStream) throws IOException{
		objectOutputStream.writeObject(this);	
	}
	
	/** getters and setters **/

	/**
	 * @return the actionID
	 */
	public int getActionID() {
		return actionID;
	}

	/**
	 * @param actionID the actionID to set
	 */
	public void setActionID(int actionID) {
		this.actionID = actionID;
	}	

	/**
	 * @return the newStatus
	 */
	public int getNewStatus() {
		return newStatus;
	}

	/**
	 * @param newStatus the newStatus to set
	 */
	public void setNewStatus(int newStatus) {
		this.newStatus = newStatus;
	}


	/** message came in from building subsystem **/
	@Override
	public void execute(Database db, ObjectOutputStream objectOutputStream,
			OutputStream serialOutputStream) {
		try {
			db.db_setCommandFlag(this.getRoom()); //edit database
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		//send frame over serial
		sendSerial(serialOutputStream);
	}
	
	/**
	if( obj instanceof Data ){
		//Data msg = (Data) obj;
		//TODO update database
	} else if (obj  instanceof DataRequest){
		DataRequest msg = (DataRequest) obj;
		try {
			Room room = db.db_getData(msg.getRoom());
			Data data = new Data();
			data.setRoom(room);
			data.sendObject(objectOutputStream); //send object to building subsystem
		} catch (SQLException e) {
			System.out.println("SQL Exception in MessageHandler");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("IO Exception in MessageHandler");
			e.printStackTrace();
			
		}
	}else if (obj instanceof RFID){
		RFID msg = (RFID) obj;
		try {
			msg.sendSerial(serialOutputStream); //send over serial connection to room subsystem
			if (msg.getStatus()==RFID.statusCodes.ADD){ // database call
				db.db_addTag(msg.getRoom(), msg.getTag());
			} else if (msg.getStatus()==RFID.statusCodes.REMOVE) {
				db.db_removeTag(msg.getRoom(), msg.getTag());
			}
		} catch (SQLException e) { 
			System.out.println("SQL Exception in MessageHandler");
			e.printStackTrace();
		}
	} else if (obj instanceof Command){
		
	} else if (obj instanceof Alarm){
		Alarm msg = (Alarm) obj;
		try {
			db.db_setAlarmFlag(msg.getRoom());
			//TODO send message to PIC to disable alarm; add to frameType; could be inside command frame!
		} catch (SQLException e) {
			System.out.println("SQL Exception in MessageHandler");
			e.printStackTrace();
		}
	} **/
	
}
